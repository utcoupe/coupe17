// Generated by CoffeeScript 1.9.1
(function() {
  var Stream, buffers, splitter;

  buffers = require("buffers");

  Stream = require("stream");

  module.exports = splitter = function(delim) {
    var buf, delimLen, doSplit, emitToken, src, srcErrorHandler, stream;
    stream = new Stream();
    buf = buffers();
    if (!Buffer.isBuffer(delim)) {
      delim = new Buffer(delim);
    }
    delimLen = delim.length;
    stream.writable = true;
    src = null;
    emitToken = function(token) {
      if (stream.encoding) {
        token = token.toString(stream.encoding);
      }
      return stream.emit("token", token);
    };
    doSplit = function() {
      var finalIndex, index;
      finalIndex = -1;
      while ((index = buf.indexOf(delim, Math.max(finalIndex, 0))) > -1) {
        emitToken(buf.slice(Math.max(finalIndex, 0), index));
        finalIndex = index + delimLen;
        if (finalIndex >= buf.length) {
          buf = buffers();
          return;
        }
      }
      if (finalIndex > -1) {
        return buf.splice(0, finalIndex);
      }
    };
    stream.write = function(data, encoding) {
      stream.emit("data", data);
      if ("string" === typeof data) {
        data = new Buffer(data, encoding);
      }
      buf.push(data);
      doSplit();
      return true;
    };
    stream.end = function(data, encoding) {
      if (data) {
        stream.write(data, encoding);
      }
      stream.writable = false;
      if (buf.length) {
        emitToken(buf.toBuffer());
      }
      stream.emit("done");
      return src && src.removeListener("error", srcErrorHandler);
    };
    srcErrorHandler = function(err) {
      if (!(src.listeners("error").length > 1)) {
        return stream.emit("error", err);
      }
    };
    stream.on("pipe", function(_src) {
      src = _src;
      return src.on("error", srcErrorHandler);
    });
    return stream;
  };

}).call(this);
